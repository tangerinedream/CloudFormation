{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template AutoScalingScheduledCFTemplate: Create a load balanced, Auto Scaled Chef enabled instance farm. The farm increases based on capacity utilization thresholds being exceeded and scales in as utilization decreases.  This example creates an Auto Scaling group behind a load balancer with a simple health check.",
  
  "Parameters" : {
    "InstanceType" : {
      "Description" : "Chef enabled EC2 instance",
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String"
    },
    
    "EgressIPRange" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
   
    "WebServerPort" : {
 		"Description" : "TCP/IP port of the web server used for healthcheck calls",
 		"Type" : "String",
 		"Default" : "80"
    }
  },

  "Mappings" : {
    
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"   : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "m3.xlarge"   : { "Arch" : "64" },
      "m3.2xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-11edb078", "64" : "ami-12d6a87b" },
      "us-west-1"      : { "32" : "ami-1af6c75f", "64" : "ami-5c9bad19" },
      "us-west-2"      : { "32" : "ami-1221ab22", "64" : "ami-008b1c30" }
    }
  },

  "Resources" : {
    
    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : 
        	[ 
        		"AWSRegionArch2AMI", 
        		{ "Ref" : "AWS::Region" },
        		{ "Fn::FindInMap" : 
        			[ 
        				"AWSInstanceType2Arch", 
        				{ "Ref" : "InstanceType" },
                        "Arch" 
                    ]
                } 
            ] 
        },
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "InstanceType" : { "Ref" : "InstanceType" },
        "EbsOptimized" : "false",
        "UserData" : { 
        	"Fn::Base64" : { 
        		"Fn::Join" : [
        			"", 
        			[
						"#!/bin/bash\n",
						"export LOG_FILE=\"/tmp/cloud-init_log.txt\"\n",
						"echo [`date +%F`][`date +%T`] Cloud-init script initiated >>\"${LOG_FILE}\"\n",
						"###\n",
						"#\n",
						"#  This script takes the necessary steps to enable a linux AMI (e.g. Ubuntu) for Chef to be installed later via Knife.  It has the following responsibilities:\n",
						"# 1. general update of system\n",
						"# 2. User 'opscode' creation\n",
						"# 3. Instead of SSH Password based Authentication, use the AWS PEM \"key file\" file for authentication\n",
						"# 4. Enable sudo privileges for 'opscode' user.\n",
						"#\n",
						"#  The associated knife command usage would be similar to:\n",
						"#      knife bootstrap $NODE_IP --sudo -x <ssh-user-id> -i <path to (AWS).pem file> -N \"<your node name>\"\"\n",
						"#      when prompted, enter sudo passcode for <ssh-user-id>\n",
						"###\n",
						"\n",
						"###\n",
						"# Log commands executed to /var/log/\n",
						"set -x\n",
						"###\n",
						"\n",
						"### \n",
						"# Bring system up to date\n",
						"apt-get -y update\n",
						"# apt-get -y upgrade\n",
						"echo [`date +%F`][`date +%T`] apt-get complete >>\"${LOG_FILE}\" \n",
						"### \n",
						"\n",
						"###\n",
						"# Create opscode user and set password\n",
						"export TARGET_UID=\"opscode\"\n",
						"useradd -m -s /bin/bash -p '$6$Ka3r1lxR$75GM7Cc2g86KafLQC3T4Tbb.YxAHXcgbpL9BDs.nETQSiabnrsGeKfk6DCuzQAGcm0YpTJkQs44moHJM..AqB/' \"${TARGET_UID}\"\n",
						"echo [`date +%F`][`date +%T`] opscode user created >>\"${LOG_FILE}\"\n",
						"###\n",
						"\n",
						"###\n",
						"# In this version, you need not modify the sshd_config file.  However, you do need to know the location of where the AWS Key File is located, so you can copy it to opscode user\n",
						"if [ -d \"/home/bitnami\" ]\n",
						"then\n",
						"   export SOURCE_UID=\"bitnami\"\n",
						"else\n",
						"   if [ -d \"/home/ec2user\" ]\n",
						"   then\n",
						"      export SOURCE_UID=\"ec2user\"\n",
						"   else\n",
						"      export SOURCE_UID=\"ubuntu\"\n",
						"   fi\n",
						"fi\n",
						"export SOURCE_SSH_DIR=\"/home/${SOURCE_UID}/.ssh\"\n",
						"export TARGET_SSH_DIR=\"/home/${TARGET_UID}/.ssh\"\n",
						"mkdir -p \"${TARGET_SSH_DIR}\"\n",
						"export AWS_SOURCE_KEY_FILE=\"${SOURCE_SSH_DIR}/authorized_keys\"\n",
						"export AWS_TARGET_KEY_FILE=\"${TARGET_SSH_DIR}/authorized_keys\"\n",
						"# TO DO: Consider changing cp to ln -s\n",
						"cp \"${AWS_SOURCE_KEY_FILE}\" \"${AWS_TARGET_KEY_FILE}\" \n",
						"chown -R \"${TARGET_UID}\" \"${TARGET_SSH_DIR}\"\n",
						"chgrp -R \"${TARGET_UID}\" \"${TARGET_SSH_DIR}\"\n",
						"echo [`date +%F`][`date +%T`] opscode pem keyfile in place >>\"${LOG_FILE}\"\n",
						"###\n",
						"\n",
						"###\n",
						"# Edit /etc/sudoers.  Allow opscode to execute sudo based commands \n",
						"# Backup the original file first\n",
						"export SUDOERS_FILE=\"/etc/sudoers\"\n",
						"cp \"${SUDOERS_FILE}\" \"${SUDOERS_FILE}.orig\"\n",
						"#\n",
						"(\n",
						"cat <<EOF\n",
						"\n",
						"opscode ALL=(ALL:ALL) ALL\n",
						"EOF\n",
						") >> \"${SUDOERS_FILE}\"\n",
						"echo [`date +%F`][`date +%T`] opscode authorized in sudoers file >>\"${LOG_FILE}\"\n",
						"###\n",
						"echo [`date +%F`][`date +%T`] Cloud-init script completed >>\"${LOG_FILE}\"\n",
						"###\n"
					]
				]
			}
		}
      }
    },
    
    "AutoScaleGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "2",
        "DesiredCapacity" : "1",
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
      }
    },
    
    "ScaleOutPolicy": {
		"Type" : "AWS::AutoScaling::ScalingPolicy",
		"Properties" : {
			"AdjustmentType" : "ChangeInCapacity",
			"AutoScalingGroupName" : {
				"Ref": "AutoScaleGroup"
			},
			"Cooldown" : "60",
			"ScalingAdjustment" : "1"
		}
    },
    
	"CPUAlarmHigh": {
	   "Type": "AWS::CloudWatch::Alarm",
	   "Properties": {
	      "AlarmDescription": "Alarm if CPU > 30 for a sustained period of 60 seconds",
	      "AlarmActions": [ { "Ref": "ScaleOutPolicy" } ],
	      "ComparisonOperator": "GreaterThanThreshold",
	      "EvaluationPeriods": "3",
	      "MetricName": "CPUUtilization",
	      "Namespace": "AWS/EC2",
	      "Period": "60",
	      "Statistic": "Average",
	      "Threshold": "30" 
	   }
	},
    
	"ScaleInPolicy": {
		"Type" : "AWS::AutoScaling::ScalingPolicy",
		"Properties" : {
			"AdjustmentType" : "ChangeInCapacity",
			"AutoScalingGroupName" : {
				"Ref": "AutoScaleGroup"
			},
			"Cooldown" : "60",
			"ScalingAdjustment" : "-1"
		}
    },
    
	"CPUAlarmLow": {
	   "Type": "AWS::CloudWatch::Alarm",
	   "Properties": {
	      "AlarmDescription": "Alarm if CPU falls below 10% for a sustained period of 60 seconds",
	      "AlarmActions": [ { "Ref": "ScaleInPolicy" } ],
	      "ComparisonOperator": "LessThanThreshold",
	      "EvaluationPeriods": "3",
	      "MetricName": "CPUUtilization",
	      "Namespace": "AWS/EC2",
	      "Period": "60",
	      "Statistic": "Average",
	      "Threshold": "10" 
	   }
	},
    
    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "Listeners" :
        	[  
        		{
        			"LoadBalancerPort" : "80", 
        			"InstancePort" : { "Ref" : "WebServerPort" }, 
        			"Protocol" : "HTTP"
        		} 
        	],
        "HealthCheck" : {
          "Target" : { 
          		"Fn::Join" : [ "", ["HTTP:", { "Ref" : "WebServerPort" }, "/"] ]
          },
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "60",
          "Timeout" : "10"
        }
       }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access and HTTP access on the configured port",
        "SecurityGroupIngress" : 
          [ 
          	{ 
          		"IpProtocol" : "tcp", 
          		"FromPort" : "22", 
          		"ToPort" : "22", 
          		"CidrIp" : { "Ref" : "EgressIPRange"} 
          	},
            { 
            	"IpProtocol" : "tcp", 
            	"FromPort" : { "Ref" : "WebServerPort" }, 
            	"ToPort" : { "Ref" : "WebServerPort" }, 
            	"CidrIp" : "0.0.0.0/0"
            } 
         ]
      }
    }
  },
  
  "Outputs" : {
	"URL" : {
	  "Description" : "URL of the website",
	  "Value" :  { "Fn::Join" : 
	  					[ "", [ "http://", 	{ "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ] } 
		   					  ]
	  					]
	  			  }
    }
  }
}
